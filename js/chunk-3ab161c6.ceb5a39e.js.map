{"version":3,"sources":["webpack:///./node_modules/markdown-it/lib/common/utils.js","webpack:///./node_modules/markdown-it/lib/rules_block/heading.js","webpack:///./node_modules/markdown-it/lib/index.js","webpack:///./node_modules/markdown-it/lib/token.js","webpack:///./node_modules/markdown-it/lib/rules_inline/state_inline.js","webpack:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js","webpack:///./node_modules/markdown-it/lib/rules_block/lheading.js","webpack:///./node_modules/markdown-it/lib/presets/zero.js","webpack:///./node_modules/markdown-it/lib/rules_inline/text_collapse.js","webpack:///./node_modules/markdown-it/lib/rules_inline/autolink.js","webpack:///./node_modules/markdown-it/lib/rules_core/block.js","webpack:///./src/components/ResearchItemView.vue?7b75","webpack:///src/components/ResearchItemView.vue","webpack:///./src/components/ResearchItemView.vue?3377","webpack:///./src/components/ResearchItemView.vue?eb78","webpack:///./node_modules/markdown-it/lib/rules_inline/newline.js","webpack:///./node_modules/markdown-it/lib/presets/commonmark.js","webpack:///./node_modules/mdurl/format.js","webpack:///./node_modules/markdown-it/lib/rules_block/paragraph.js","webpack:///./node_modules/markdown-it/lib/ruler.js","webpack:///./node_modules/markdown-it/lib/rules_inline/backticks.js","webpack:///./node_modules/markdown-it/lib/rules_block/list.js","webpack:///./node_modules/markdown-it/lib/rules_core/normalize.js","webpack:///./node_modules/markdown-it/lib/parser_inline.js","webpack:///./node_modules/uc.micro/categories/Z/regex.js","webpack:///./node_modules/markdown-it/lib/helpers/index.js","webpack:///./node_modules/markdown-it/lib/common/html_re.js","webpack:///./node_modules/markdown-it/lib/rules_inline/entity.js","webpack:///./node_modules/markdown-it/lib/rules_block/html_block.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/markdown-it/lib/rules_inline/escape.js","webpack:///./node_modules/uc.micro/categories/Cf/regex.js","webpack:///./node_modules/markdown-it/lib/rules_core/state_core.js","webpack:///./node_modules/markdown-it/lib/parser_block.js","webpack:///./node_modules/uc.micro/categories/P/regex.js","webpack:///./node_modules/markdown-it/lib/renderer.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_title.js","webpack:///./node_modules/markdown-it/lib/rules_block/table.js","webpack:///./node_modules/markdown-it/lib/rules_block/state_block.js","webpack:///./node_modules/markdown-it/lib/rules_inline/balance_pairs.js","webpack:///./node_modules/markdown-it/lib/presets/default.js","webpack:///./node_modules/mdurl/decode.js","webpack:///./node_modules/markdown-it/lib/rules_inline/strikethrough.js","webpack:///./node_modules/markdown-it/lib/rules_inline/image.js","webpack:///./node_modules/markdown-it/lib/rules_core/linkify.js","webpack:///./node_modules/markdown-it/lib/rules_block/code.js","webpack:///./node_modules/markdown-it/lib/rules_core/inline.js","webpack:///./node_modules/uc.micro/categories/Cc/regex.js","webpack:///./node_modules/markdown-it/lib/parser_core.js","webpack:///./node_modules/markdown-it/lib/rules_core/smartquotes.js","webpack:///./node_modules/linkify-it/lib/re.js","webpack:///./src/components/ResearchItemView.vue?d395","webpack:///./node_modules/markdown-it/lib/rules_inline/text.js","webpack:///./node_modules/markdown-it/lib/rules_core/replacements.js","webpack:///./node_modules/markdown-it/lib/common/entities.js","webpack:///./node_modules/markdown-it/lib/rules_block/fence.js","webpack:///./node_modules/markdown-it/lib/rules_inline/html_inline.js","webpack:///./node_modules/mdurl/encode.js","webpack:///./node_modules/markdown-it/lib/rules_inline/emphasis.js","webpack:///./node_modules/uc.micro/properties/Any/regex.js","webpack:///./node_modules/markdown-it/lib/rules_inline/link.js","webpack:///./node_modules/markdown-it/index.js","webpack:///./node_modules/uc.micro/index.js","webpack:///./node_modules/markdown-it/lib/rules_block/reference.js","webpack:///./node_modules/mdurl/index.js","webpack:///./node_modules/mdurl/parse.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_label.js","webpack:///./node_modules/markdown-it/lib/common/html_blocks.js","webpack:///./node_modules/markdown-it/lib/helpers/parse_link_destination.js","webpack:///./node_modules/markdown-it-footnote/index.js","webpack:///./node_modules/markdown-it/lib/rules_block/blockquote.js","webpack:///./node_modules/linkify-it/index.js","webpack:///./node_modules/markdown-it/lib/rules_block/hr.js"],"names":["_class","obj","Object","prototype","toString","call","isString","_hasOwnProperty","hasOwnProperty","has","object","key","assign","sources","Array","slice","arguments","forEach","source","TypeError","keys","arrayReplaceAt","src","pos","newElements","concat","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","ENTITY_RE","UNESCAPE_ALL_RE","RegExp","DIGITAL_ENTITY_TEST_RE","entities","__webpack_require__","replaceEntityPattern","match","name","code","charCodeAt","test","toLowerCase","parseInt","unescapeMd","str","indexOf","replace","unescapeAll","escaped","entity","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","&","<",">","\"","replaceUnsafeChar","ch","escapeHtml","REGEXP_ESCAPE_RE","escapeRE","isSpace","isWhiteSpace","UNICODE_PUNCT_RE","isPunctChar","isMdAsciiPunct","normalizeReference","trim","toUpperCase","exports","lib","mdurl","ucmicro","module","state","startLine","endLine","silent","level","tmp","token","bMarks","tShift","max","eMarks","sCount","blkIndent","skipSpacesBack","skipCharsBack","line","push","markup","map","content","children","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","default","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","parse","hostname","protocol","toASCII","er","encode","format","normalizeLinkText","toUnicode","decode","MarkdownIt","presetName","options","this","inline","block","core","renderer","linkify","configure","set","presets","self","Error","components","rules","ruler","enableOnly","rules2","ruler2","enable","list","ignoreInvalid","result","isArray","chain","missed","filter","length","disable","use","plugin","args","apply","env","State","process","tokens","render","parseInline","inlineMode","renderInline","Token","type","tag","nesting","attrs","info","meta","hidden","attrIndex","i","len","attrPush","attrData","attrSet","value","idx","attrGet","attrJoin","StateInline","md","outTokens","posMax","pending","pendingLevel","cache","delimiters","pushPending","scanDelims","start","canSplitWord","lastChar","nextChar","count","can_open","can_close","isLastWhiteSpace","isLastPunctChar","isNextWhiteSpace","isNextPunctChar","left_flanking","right_flanking","marker","global","__WEBPACK_AMD_DEFINE_RESULT__","root","nodeType","freeGlobal","window","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","overflow","not-basic","invalid-input","baseMinusTMin","floor","Math","stringFromCharCode","error","RangeError","array","fn","mapDomain","string","parts","split","labels","encoded","join","ucs2decode","extra","output","counter","ucs2encode","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","input","out","basic","j","index","oldi","w","t","baseMinusT","inputLength","n","bias","lastIndexOf","splice","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","version","ucs2","undefined","terminate","l","oldParentType","nextLine","terminatorRules","getRules","parentType","isEmpty","skipChars","skipSpaces","getLines","html","xhtmlOut","breaks","langPrefix","typographer","quotes","highlight","maxNesting","curr","last","EMAIL_RE","AUTOLINK_RE","tail","linkMatch","emailMatch","fullUrl","_vm","_h","$createElement","_c","_self","height","article","image","justify-center","row","xs12","sm10","md8","align-center","justify-space-between","staticClass","_l","_v","_s","category","flat","exact","to","title","summary","allAuthors","date","domProps","innerHTML","compliedBody","staticStyle","staticRenderFns","ResearchItemViewvue_type_script_lang_js_","props","item","computed","components_ResearchItemViewvue_type_script_lang_js_","component","componentNormalizer","__file","__webpack_exports__","pmax","slashes","auth","port","pathname","search","hash","lineMax","Ruler","__rules__","__cache__","__find__","__compile__","chains","rule","enabled","alt","altName","at","opt","before","beforeName","ruleName","after","afterName","chainName","matchStart","matchEnd","skipBulletListMarker","skipOrderedListMarker","markTightParagraphs","contentStart","indent","indentAfterMarker","initial","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","offset","oldIndent","oldLIndent","oldTShift","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","tight","Number","substr","bsCount","min","tokenize","NEWLINES_RE","NULL_RE","_rules","_rules2","postProcess","skipToken","ok","end","parseLinkLabel","parseLinkDestination","parseLinkTitle","attr_name","unquoted","single_quoted","double_quoted","attr_value","attribute","open_tag","close_tag","comment","processing","declaration","cdata","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","DIGITAL_RE","NAMED_RE","block_names","HTML_SEQUENCES","lineText","webpackPolyfill","deprecate","paths","defineProperty","enumerable","get","ESCAPED","StateCore","hasEmptyLines","skipEmptyLines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","tmpAttrs","tmpToken","langName","renderInlineAsText","renderToken","hardbreak","softbreak","text","html_block","html_inline","nextToken","needLf","lines","getLine","escapedSplit","escapes","lastPos","backTicked","lastBackTick","substring","columns","columnCount","aligns","tableLines","tbodyLines","StateBlock","s","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","lastDelim","currDelim","close","jump","open","odd_match","decodeCache","getDecodeCache","exclude","defaultChars","seq","b1","b2","b3","b4","chr","componentChars","scanned","startDelim","endDelim","loneMarkers","pop","label","labelEnd","labelStart","ref","res","href","oldPos","references","isLinkOpen","isLinkClose","currentToken","nodes","ln","htmlLinkLevel","urlText","links","blockTokens","pretest","schema","lastIndex","tok","Core","QUOTE_TEST_RE","QUOTE_RE","APOSTROPHE","replaceAt","process_inlines","thisLevel","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","exec","single","blkIdx","opts","re","src_Any","src_Cc","src_Z","src_P","src_ZPCc","src_ZCc","text_separators","src_pseudo_letter","src_ip4","src_auth","src_port","src_host_terminator","src_path","src_email_name","src_xn","src_domain_root","src_domain","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","src_host_strict","tpl_host_fuzzy_strict","src_host_port_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","tpl_host_fuzzy_test","tpl_email_fuzzy","tpl_link_fuzzy","tpl_link_no_ip_fuzzy","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ResearchItemView_vue_vue_type_style_index_0_id_81caec1c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ResearchItemView_vue_vue_type_style_index_0_id_81caec1c_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","isTerminatorChar","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","params","mem","haveEndMarker","isLetter","lc","encodeCache","getEncodeCache","keepEscaped","nextCode","encodeURIComponent","isStrong","parseReference","Any","Cc","Cf","P","Z","_endLine","destEndPos","destEndLineNo","Url","protocolPattern","portPattern","simplePathPattern","delims","unwise","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","hostlessProtocol","javascript","javascript:","slashedProtocol","http","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","urlParse","slashesDenoteHost","u","lowerProto","hec","rest","simplePath","proto","atSign","hostEnd","host","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","unshift","qm","disableNested","found","prevPos","render_footnote_anchor_name","id","prefix","docId","render_footnote_caption","subId","render_footnote_ref","footnote_anchor_name","caption","footnote_caption","refid","render_footnote_block_open","render_footnote_block_close","render_footnote_open","render_footnote_close","render_footnote_anchor","footnote_def","oldBMark","oldSCount","posAfterColon","footnotes","refs","footnote_inline","footnoteId","footnote_ref","footnoteSubId","footnote_tail","lastParagraph","current","currentLabel","insideRef","refTokens","footnote_block_open","footnote_block_close","footnote_open","footnote_close","footnote_anchor","adjustTab","lastLineEmpty","oldBMarks","oldBSCount","spaceAfterMarker","wasOutdented","oldLineMax","isObject","isRegExp","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","isOptionsObj","reduce","acc","defaultSchemas","validate","//","no_http","mailto:","mailto","tlds_2ch_src_re","tlds_default","resetScanCache","__index__","__text_cache__","createValidator","createNormalizer","normalize","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","email_fuzzy","link_fuzzy","link_no_ip_fuzzy","host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","alias","slist","schema_test","schema_search","Match","shift","__last_index__","__schema__","raw","createMatch","schemas","add","definition","ml","me","next","tld_pos","at_pos","testSchemaAt","keepOld","sort","el","arr","reverse","cnt"],"mappings":"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","file":"js/chunk-3ab161c6.ceb5a39e.js","sourcesContent":["// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16)\n    :\n      parseInt(name.slice(1), 10);\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // use .toUpperCase() instead of .toLowerCase()\n  // here to avoid a conflict with Object.prototype\n  // members (most notably, `__proto__`)\n  return str.trim().replace(/\\s+/g, ' ').toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  this.cache = {};        // Stores { start: end } pairs. Useful for backtrack\n                          // optimization of pairs parse (emphasis, strikes).\n\n  this.delimiters = [];   // Emphasis-like delimiters\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Merge adjacent text nodes into one, and re-calculate all token levels\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels\n    level += tokens[curr].nesting;\n    tokens[curr].level = level;\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('v-img',{attrs:{\"height\":\"500px\",\"src\":_vm.article.image.url}}),_c('v-container',[_c('v-layout',{attrs:{\"justify-center\":\"\",\"row\":\"\"}},[_c('v-flex',{attrs:{\"xs12\":\"\",\"sm10\":\"\",\"md8\":\"\"}},[_c('v-layout',{attrs:{\"align-center\":\"\",\"justify-space-between\":\"\",\"row\":\"\"}},[_c('div',{staticClass:\"article-header\"},[_vm._l((_vm.article.type),function(type,i){return _c('span',{key:i},[_vm._v(\"\\n                            \"+_vm._s(type)+\"\\n                        \")])}),_vm._v(\"\\n                         | \\n                        \"),_vm._l((_vm.article.categories),function(category,i){return _c('span',{key:i},[_vm._v(\"\\n                            \"+_vm._s(category)+\"\\n                        \")])})],2),_c('v-btn',{attrs:{\"flat\":\"\",\"exact\":\"\",\"to\":\"/research\"}},[_vm._v(\"\\n                        Back\\n                    \")])],1),_c('h1',{staticClass:\"article-title\"},[_vm._v(_vm._s(_vm.article.title))]),_c('div',{staticClass:\"article-summary my-3\"},[_vm._v(\"\\n                    \"+_vm._s(_vm.article.summary)+\"\\n                \")]),_c('div',[_c('span',{staticClass:\"article-authors\"},[_vm._v(\"\\n                        \"+_vm._s(_vm.article.allAuthors)+\"\\n                    \")]),_vm._v(\"\\n                     | \\n                    \"),_c('span',{staticClass:\"article-date\"},[_vm._v(\"\\n                        \"+_vm._s(_vm.article.date)+\"\\n                        \")])]),_c('v-divider'),_c('div',{staticClass:\"article-body py-3\",domProps:{\"innerHTML\":_vm._s(_vm.compliedBody)}}),_c('div',{staticStyle:{\"height\":\"500px\"}})],1)],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <v-img\r\n            height=\"500px\"\r\n            :src=\"article.image.url\"\r\n            >\r\n        </v-img>\r\n\r\n        <v-container>\r\n            <v-layout\r\n                justify-center\r\n                row\r\n                >\r\n                <v-flex\r\n                    xs12\r\n                    sm10\r\n                    md8\r\n                    >\r\n                    <v-layout\r\n                        align-center\r\n                        justify-space-between\r\n                        row\r\n                        >\r\n                        <div class=\"article-header\">\r\n                            <span\r\n                                v-for=\"(type, i) in article.type\"\r\n                                :key=\"i\"\r\n                                >\r\n                                {{ type }}\r\n                            </span>\r\n                            &nbsp;|&nbsp;\r\n                            <span\r\n                                v-for=\"(category, i) in article.categories\"\r\n                                :key=\"i\"\r\n                                >\r\n                                {{ category }}\r\n                            </span>\r\n                        </div>\r\n\r\n                        <v-btn\r\n                            flat\r\n                            exact\r\n                            to=\"/research\"\r\n                            >\r\n                            Back\r\n                        </v-btn>\r\n                    </v-layout>\r\n                    \r\n                    <h1 class=\"article-title\">{{ article.title }}</h1>\r\n\r\n                    <div class=\"article-summary my-3\">\r\n                        {{ article.summary }}\r\n                    </div>\r\n\r\n                    <div>\r\n                        <span class=\"article-authors\">\r\n                            {{ article.allAuthors }}\r\n                        </span>\r\n                        &nbsp;|&nbsp;\r\n                        <span class=\"article-date\">\r\n                            {{ article.date }}\r\n                            </span>\r\n                    </div>\r\n\r\n                    <v-divider />\r\n\r\n                    <div\r\n                        class=\"article-body py-3\"\r\n                        v-html=\"compliedBody\"\r\n                        />\r\n\r\n                    <div style=\"height: 500px\"></div>\r\n                </v-flex>\r\n\r\n            </v-layout>        \r\n        </v-container>\r\n\r\n        \r\n    </div>\r\n</template>\r\n\r\n<script>\r\nconst md = require('markdown-it')({\r\n        html: true,\r\n        linkify: true,\r\n        typographer: true\r\n    })\r\n    .use(require('markdown-it-footnote'));\r\n\r\nexport default {\r\n    props: {\r\n        item: Object,\r\n    },\r\n    computed: {\r\n        article () {\r\n            return this.item;\r\n        },\r\n        compliedBody () {\r\n            let test = \"# Heading (#)\\n\"\r\n            test += \"Some contents[^1]\\n\"\r\n            test += \"## Sub-heading (##)\\n\"\r\n            test += \"Some contents[^2]\\n\"\r\n            test += \"### Sub-sub-heading (###)\\n\"\r\n            test += \"Some contents\\n\"\r\n            test += \"#### Sub-sub-sub-heading (####)\\n\"\r\n            test += \"Some contents\\n\"\r\n            test += \"##### Sub-sub-sub-sub-heading (#####)\\n\"\r\n            test += \"Some contents\\n\"\r\n            test += \"[^1]: First footnote\\n\"\r\n            test += \"[^2]: Second footnote\\n\"\r\n            \r\n            return md.render(test);\r\n            // return md.render(this.item.body);\r\n        }\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.article-authors {\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    font-family: 'Oswald', sans-serif;\r\n}\r\n\r\n.article-body >>> h1,\r\n.article-body >>> h2,\r\n.article-body >>> h3,\r\n.article-body >>> h4,\r\n.article-body >>> h5,\r\n.article-body >>> h6 {\r\n    font-family: 'Oswald',sans-serif;\r\n    line-height: 1.3;\r\n}\r\n\r\n.article-body >>> h1,\r\n.article-body >>> h2,\r\n.article-body >>> h3 {\r\n    margin-top: 22px;\r\n    margin-bottom: 11px;\r\n    font-weight: 500;\r\n}\r\n\r\n.article-body >>> h4,\r\n.article-body >>> h5,\r\n.article-body >>> h6 {\r\n    text-transform: uppercase;\r\n    color: black;\r\n    letter-spacing: .04em;\r\n    font-weight: 700;\r\n    line-height: 26px;\r\n}\r\n\r\n.article-body >>> h1 {\r\n    font-size: 48px;\r\n    font-weight: 700;\r\n}\r\n\r\n.article-body >>> h2 {\r\n    font-size: 34px;\r\n}\r\n\r\n.article-body >>> h3 {\r\n    font-size: 24px;\r\n}\r\n\r\n.article-body >>> h4 {\r\n    font-size: 17px;\r\n}\r\n\r\n.article-body >>> h5 {\r\n    font-size: 14px;\r\n}\r\n\r\n.article-body >>> p {\r\n    font-size: 22px;\r\n    text-indent: 1.5em;\r\n}\r\n\r\n.article-body >>> hr {\r\n    margin-top: 22px;\r\n    margin-bottom: 22px;\r\n    border: 0;\r\n    border-top: 1px solid #eee;\r\n}\r\n\r\n.article-body >>> .footnotes {\r\n    margin-top: 30px;\r\n    margin-bottom: 30px;\r\n}\r\n\r\n.article-body >>> .footnotes p {\r\n    font-size: 16px;\r\n    text-indent: 0;\r\n}\r\n\r\n.article-date {\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    font-family: 'Oswald',serif;\r\n    color: #999;\r\n}\r\n\r\n.article-header {\r\n    font-family: 'Lato', sans-serif;\r\n}\r\n\r\n.article-img {\r\n    width: 100%;\r\n}\r\n\r\n.article-title {\r\n    font-size: 48px;\r\n    font-weight: 700;\r\n    line-height: 1.3;\r\n}\r\n\r\n.article-summary {\r\n    color: grey;\r\n    font-family: 'Lato', sans-serif;\r\n    font-weight: 300;\r\n    font-size: 20px;\r\n}\r\n\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResearchItemView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResearchItemView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ResearchItemView.vue?vue&type=template&id=81caec1c&scoped=true&\"\nimport script from \"./ResearchItemView.vue?vue&type=script&lang=js&\"\nexport * from \"./ResearchItemView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ResearchItemView.vue?vue&type=style&index=0&id=81caec1c&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"81caec1c\",\n  null\n  \n)\n\ncomponent.options.__file = \"ResearchItemView.vue\"\nexport default component.exports","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n                                 .replace(/[ \\n]+/g, ' ')\n                                 .trim();\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldIndent,\n      oldLIndent,\n      oldParentType,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    oldIndent = state.blkIndent;\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldLIndent = state.sCount[startLine];\n    state.blkIndent = indent;\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = oldIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldLIndent;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","// Normalize input string\n\n'use strict';\n\n\nvar NEWLINES_RE  = /\\r[\\n\\u0085]?|[\\u2424\\u2028\\u0085]/g;\nvar NULL_RE      = /\\u0000/g;\n\n\nmodule.exports = function inline(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,8}|[0-9]{1,8}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804\\uDCBD|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","module.exports=/[!-#%-\\*,-/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E49\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent\n                       // (for example, if we are in list)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) { this.level--; }\n  token.level = this.level;\n  if (nesting > 0) { this.level++; }\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nmodule.exports = function link_pairs(state) {\n  var i, j, lastDelim, currDelim,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    lastDelim = delimiters[i];\n\n    if (!lastDelim.close) { continue; }\n\n    j = i - lastDelim.jump - 1;\n\n    while (j >= 0) {\n      currDelim = delimiters[j];\n\n      if (currDelim.open &&\n          currDelim.marker === lastDelim.marker &&\n          currDelim.end < 0 &&\n          currDelim.level === lastDelim.level) {\n\n        // typeofs are for backward compatibility with plugins\n        var odd_match = (currDelim.close || lastDelim.open) &&\n                        typeof currDelim.length !== 'undefined' &&\n                        typeof lastDelim.length !== 'undefined' &&\n                        (currDelim.length + lastDelim.length) % 3 === 0;\n\n        if (!odd_match) {\n          lastDelim.jump = i - j;\n          lastDelim.open = false;\n          currDelim.end  = i;\n          currDelim.jump = 0;\n          break;\n        }\n      }\n\n      j -= currDelim.jump + 1;\n    }\n  }\n};\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      jump:   i,\n      token:  state.tokens.length - 1,\n      level:  state.level,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,3}[a-zA-Z0-9%/]|' + // github has ... in commit range links. Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          '\\\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths\n          '\\\\!(?!' + re.src_ZCc + '|[!]).|' +\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]+';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\\\\(|' + re.src_ZCc + ')(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResearchItemView.vue?vue&type=style&index=0&id=81caec1c&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ResearchItemView.vue?vue&type=style&index=0&id=81caec1c&scoped=true&lang=css&\"","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Simple typographyc replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n                    .replace(/\\+-/g, '±')\n                    // .., ..., ....... -> …\n                    // but ?..... & !..... -> ?.. & !..\n                    .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n                    .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n                    // em-dash\n                    .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n                    // en-dash\n                    .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n                    .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/maps/entities.json');\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (params.indexOf(String.fromCharCode(marker)) >= 0) { return false; }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // Token level.\n      //\n      level:  state.level,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      delimiters = state.delimiters,\n      max = state.delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n};\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Parse link destination\n//\n'use strict';\n\n\nvar isSpace     = require('../common/utils').isSpace;\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */ || isSpace(code)) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Process footnotes\n//\n'use strict';\n\n////////////////////////////////////////////////////////////////////////////////\n// Renderer partials\n\nfunction render_footnote_anchor_name(tokens, idx, options, env/*, slf*/) {\n  var n = Number(tokens[idx].meta.id + 1).toString();\n  var prefix = '';\n\n  if (typeof env.docId === 'string') {\n    prefix = '-' + env.docId + '-';\n  }\n\n  return prefix + n;\n}\n\nfunction render_footnote_caption(tokens, idx/*, options, env, slf*/) {\n  var n = Number(tokens[idx].meta.id + 1).toString();\n\n  if (tokens[idx].meta.subId > 0) {\n    n += ':' + tokens[idx].meta.subId;\n  }\n\n  return '[' + n + ']';\n}\n\nfunction render_footnote_ref(tokens, idx, options, env, slf) {\n  var id      = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);\n  var caption = slf.rules.footnote_caption(tokens, idx, options, env, slf);\n  var refid   = id;\n\n  if (tokens[idx].meta.subId > 0) {\n    refid += ':' + tokens[idx].meta.subId;\n  }\n\n  return '<sup class=\"footnote-ref\"><a href=\"#fn' + id + '\" id=\"fnref' + refid + '\">' + caption + '</a></sup>';\n}\n\nfunction render_footnote_block_open(tokens, idx, options) {\n  return (options.xhtmlOut ? '<hr class=\"footnotes-sep\" />\\n' : '<hr class=\"footnotes-sep\">\\n') +\n         '<section class=\"footnotes\">\\n' +\n         '<ol class=\"footnotes-list\">\\n';\n}\n\nfunction render_footnote_block_close() {\n  return '</ol>\\n</section>\\n';\n}\n\nfunction render_footnote_open(tokens, idx, options, env, slf) {\n  var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);\n\n  if (tokens[idx].meta.subId > 0) {\n    id += ':' + tokens[idx].meta.subId;\n  }\n\n  return '<li id=\"fn' + id + '\" class=\"footnote-item\">';\n}\n\nfunction render_footnote_close() {\n  return '</li>\\n';\n}\n\nfunction render_footnote_anchor(tokens, idx, options, env, slf) {\n  var id = slf.rules.footnote_anchor_name(tokens, idx, options, env, slf);\n\n  if (tokens[idx].meta.subId > 0) {\n    id += ':' + tokens[idx].meta.subId;\n  }\n\n  /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n  return ' <a href=\"#fnref' + id + '\" class=\"footnote-backref\">\\u21a9\\uFE0E</a>';\n}\n\n\nmodule.exports = function footnote_plugin(md) {\n  var parseLinkLabel = md.helpers.parseLinkLabel,\n      isSpace = md.utils.isSpace;\n\n  md.renderer.rules.footnote_ref          = render_footnote_ref;\n  md.renderer.rules.footnote_block_open   = render_footnote_block_open;\n  md.renderer.rules.footnote_block_close  = render_footnote_block_close;\n  md.renderer.rules.footnote_open         = render_footnote_open;\n  md.renderer.rules.footnote_close        = render_footnote_close;\n  md.renderer.rules.footnote_anchor       = render_footnote_anchor;\n\n  // helpers (only used in other rules, no tokens are attached to those)\n  md.renderer.rules.footnote_caption      = render_footnote_caption;\n  md.renderer.rules.footnote_anchor_name  = render_footnote_anchor_name;\n\n  // Process footnote block definition\n  function footnote_def(state, startLine, endLine, silent) {\n    var oldBMark, oldTShift, oldSCount, oldParentType, pos, label, token,\n        initial, offset, ch, posAfterColon,\n        start = state.bMarks[startLine] + state.tShift[startLine],\n        max = state.eMarks[startLine];\n\n    // line should be at least 5 chars - \"[^x]:\"\n    if (start + 4 > max) { return false; }\n\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x20) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos + 1 >= max || state.src.charCodeAt(++pos) !== 0x3A /* : */) { return false; }\n    if (silent) { return true; }\n    pos++;\n\n    if (!state.env.footnotes) { state.env.footnotes = {}; }\n    if (!state.env.footnotes.refs) { state.env.footnotes.refs = {}; }\n    label = state.src.slice(start + 2, pos - 2);\n    state.env.footnotes.refs[':' + label] = -1;\n\n    token       = new state.Token('footnote_reference_open', '', 1);\n    token.meta  = { label: label };\n    token.level = state.level++;\n    state.tokens.push(token);\n\n    oldBMark = state.bMarks[startLine];\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n    oldParentType = state.parentType;\n\n    posAfterColon = pos;\n    initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    state.tShift[startLine] = pos - posAfterColon;\n    state.sCount[startLine] = offset - initial;\n\n    state.bMarks[startLine] = posAfterColon;\n    state.blkIndent += 4;\n    state.parentType = 'footnote';\n\n    if (state.sCount[startLine] < state.blkIndent) {\n      state.sCount[startLine] += state.blkIndent;\n    }\n\n    state.md.block.tokenize(state, startLine, endLine, true);\n\n    state.parentType = oldParentType;\n    state.blkIndent -= 4;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.bMarks[startLine] = oldBMark;\n\n    token       = new state.Token('footnote_reference_close', '', -1);\n    token.level = --state.level;\n    state.tokens.push(token);\n\n    return true;\n  }\n\n  // Process inline footnotes (^[...])\n  function footnote_inline(state, silent) {\n    var labelStart,\n        labelEnd,\n        footnoteId,\n        token,\n        tokens,\n        max = state.posMax,\n        start = state.pos;\n\n    if (start + 2 >= max) { return false; }\n    if (state.src.charCodeAt(start) !== 0x5E/* ^ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5B/* [ */) { return false; }\n\n    labelStart = start + 2;\n    labelEnd = parseLinkLabel(state, start + 1);\n\n    // parser failed to find ']', so it's not a valid note\n    if (labelEnd < 0) { return false; }\n\n    // We found the end of the link, and know for a fact it's a valid link;\n    // so all that's left to do is to call tokenizer.\n    //\n    if (!silent) {\n      if (!state.env.footnotes) { state.env.footnotes = {}; }\n      if (!state.env.footnotes.list) { state.env.footnotes.list = []; }\n      footnoteId = state.env.footnotes.list.length;\n\n      state.md.inline.parse(\n        state.src.slice(labelStart, labelEnd),\n        state.md,\n        state.env,\n        tokens = []\n      );\n\n      token      = state.push('footnote_ref', '', 0);\n      token.meta = { id: footnoteId };\n\n      state.env.footnotes.list[footnoteId] = { tokens: tokens };\n    }\n\n    state.pos = labelEnd + 1;\n    state.posMax = max;\n    return true;\n  }\n\n  // Process footnote references ([^...])\n  function footnote_ref(state, silent) {\n    var label,\n        pos,\n        footnoteId,\n        footnoteSubId,\n        token,\n        max = state.posMax,\n        start = state.pos;\n\n    // should be at least 4 chars - \"[^x]\"\n    if (start + 3 > max) { return false; }\n\n    if (!state.env.footnotes || !state.env.footnotes.refs) { return false; }\n    if (state.src.charCodeAt(start) !== 0x5B/* [ */) { return false; }\n    if (state.src.charCodeAt(start + 1) !== 0x5E/* ^ */) { return false; }\n\n    for (pos = start + 2; pos < max; pos++) {\n      if (state.src.charCodeAt(pos) === 0x20) { return false; }\n      if (state.src.charCodeAt(pos) === 0x0A) { return false; }\n      if (state.src.charCodeAt(pos) === 0x5D /* ] */) {\n        break;\n      }\n    }\n\n    if (pos === start + 2) { return false; } // no empty footnote labels\n    if (pos >= max) { return false; }\n    pos++;\n\n    label = state.src.slice(start + 2, pos - 1);\n    if (typeof state.env.footnotes.refs[':' + label] === 'undefined') { return false; }\n\n    if (!silent) {\n      if (!state.env.footnotes.list) { state.env.footnotes.list = []; }\n\n      if (state.env.footnotes.refs[':' + label] < 0) {\n        footnoteId = state.env.footnotes.list.length;\n        state.env.footnotes.list[footnoteId] = { label: label, count: 0 };\n        state.env.footnotes.refs[':' + label] = footnoteId;\n      } else {\n        footnoteId = state.env.footnotes.refs[':' + label];\n      }\n\n      footnoteSubId = state.env.footnotes.list[footnoteId].count;\n      state.env.footnotes.list[footnoteId].count++;\n\n      token      = state.push('footnote_ref', '', 0);\n      token.meta = { id: footnoteId, subId: footnoteSubId, label: label };\n    }\n\n    state.pos = pos;\n    state.posMax = max;\n    return true;\n  }\n\n  // Glue footnote tokens to end of token stream\n  function footnote_tail(state) {\n    var i, l, j, t, lastParagraph, list, token, tokens, current, currentLabel,\n        insideRef = false,\n        refTokens = {};\n\n    if (!state.env.footnotes) { return; }\n\n    state.tokens = state.tokens.filter(function (tok) {\n      if (tok.type === 'footnote_reference_open') {\n        insideRef = true;\n        current = [];\n        currentLabel = tok.meta.label;\n        return false;\n      }\n      if (tok.type === 'footnote_reference_close') {\n        insideRef = false;\n        // prepend ':' to avoid conflict with Object.prototype members\n        refTokens[':' + currentLabel] = current;\n        return false;\n      }\n      if (insideRef) { current.push(tok); }\n      return !insideRef;\n    });\n\n    if (!state.env.footnotes.list) { return; }\n    list = state.env.footnotes.list;\n\n    token = new state.Token('footnote_block_open', '', 1);\n    state.tokens.push(token);\n\n    for (i = 0, l = list.length; i < l; i++) {\n      token      = new state.Token('footnote_open', '', 1);\n      token.meta = { id: i, label: list[i].label };\n      state.tokens.push(token);\n\n      if (list[i].tokens) {\n        tokens = [];\n\n        token          = new state.Token('paragraph_open', 'p', 1);\n        token.block    = true;\n        tokens.push(token);\n\n        token          = new state.Token('inline', '', 0);\n        token.children = list[i].tokens;\n        token.content  = '';\n        tokens.push(token);\n\n        token          = new state.Token('paragraph_close', 'p', -1);\n        token.block    = true;\n        tokens.push(token);\n\n      } else if (list[i].label) {\n        tokens = refTokens[':' + list[i].label];\n      }\n\n      state.tokens = state.tokens.concat(tokens);\n      if (state.tokens[state.tokens.length - 1].type === 'paragraph_close') {\n        lastParagraph = state.tokens.pop();\n      } else {\n        lastParagraph = null;\n      }\n\n      t = list[i].count > 0 ? list[i].count : 1;\n      for (j = 0; j < t; j++) {\n        token      = new state.Token('footnote_anchor', '', 0);\n        token.meta = { id: i, subId: j, label: list[i].label };\n        state.tokens.push(token);\n      }\n\n      if (lastParagraph) {\n        state.tokens.push(lastParagraph);\n      }\n\n      token = new state.Token('footnote_close', '', -1);\n      state.tokens.push(token);\n    }\n\n    token = new state.Token('footnote_block_close', '', -1);\n    state.tokens.push(token);\n  }\n\n  md.block.ruler.before('reference', 'footnote_def', footnote_def, { alt: [ 'paragraph', 'reference' ] });\n  md.inline.ruler.after('image', 'footnote_inline', footnote_inline);\n  md.inline.ruler.after('footnote_inline', 'footnote_ref', footnote_ref);\n  md.core.ruler.after('inline', 'footnote_tail', footnote_tail);\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n"],"sourceRoot":""}